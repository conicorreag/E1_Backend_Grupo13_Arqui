name: Build and Push to ECR

on:
  push:
    branches:
      - main
      - cd-ci

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

        
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::571102053161:role/grupo13-githubactions-ecr-workflows
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public

    - name: Build, tag, and push docker image to Amazon ECR Public
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: a0d1a3g4
        DOCKERFILE_API: Dockerfile.api
        DOCKERFILE_MQTT: Dockerfile.mqtt
        DOCKERFILE_WORKERS: workers/Dockerfile
        REPOSITORY_API: grupo13-e2
        REPOSITORY_MQTT: grupo13-e2-mqtt
        REPOSITORY_WORKERS: grupo13-e2-workers
        IMAGE_TAG: latest

      run: | 
        docker build -f $DOCKERFILE_API -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY_API:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY_API:$IMAGE_TAG
        docker build -f $DOCKERFILE_MQTT -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY_MQTT:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY_MQTT:$IMAGE_TAG
        docker build -f $DOCKERFILE_WORKERS -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY_WORKERS:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY_WORKERS:$IMAGE_TAG
  
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::571102053161:role/grupo13-githubactions-ecr-workflows
        aws-region: us-east-1
    
    - name: Zip Artifacts to deploy 
      run: zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml
    
    - name: Zip Artifacts And upload to S3
      run: 
        zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml | 
        aws s3 cp deploy.zip s3://grupo13-codedeploy/deploy.zip
    
    - name: Create Codedeploy Deployment
      id: codedeploy-deploy-trigger 
      env:
        DEPLOYMENT_APPLICATION_NAME: grupo13-codedeploy
        DEPLOYMENT_GROUP_NAME: grupo13-deployment-group
        DEPLOYMENT_BUCKET_NAME: grupo13-codedeploy
      run: |
        deploymentId=$( aws deploy create-deployment \
          --application-name $DEPLOYMENT_APPLICATION_NAME \
          --deployment-group-name $DEPLOYMENT_GROUP_NAME \
          --s3-location bucket=$DEPLOYMENT_BUCKET_NAME,key=deploy.zip,bundleType=zip \
          --description "Automatic deployment fron github commit ${{github.sha}}" | jq -r '.deploymentId' )
        echo "deploymentId=$deploymentId" >> $GITHUB_OUTPUT
      
    - name: Wait until deployment is done
      run: aws deploy wait deployment-successful --deployment-id ${{steps.codedeploy-deploy-trigger.outputs.deploymentId}}
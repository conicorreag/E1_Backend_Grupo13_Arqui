version: '3'
services:
  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    restart: always
    networks:
      - mqtt-network
      - app-network
    volumes:
      - ./app:/app/app
    depends_on:
      - postgres
    
      

  postgres:
    image: postgres:latest
    networks:
      - app-network
    ports:
      - "5432:5432"
    restart: always
    hostname: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db-volume:/var/lib/postgresql/data 
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.

  redis-broker:
    # https://redis.com/solutions/use-cases/messaging/
    image: redis:7
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network


  producer:
    build:
        context: ./workers
        dockerfile: Dockerfile
    command: uvicorn producer:app --reload --host 0.0.0.0 --port 8080
    volumes:
      - ./workers:/opt/
    expose:
      - 8080
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      - redis-broker
    networks:
      - app-network

  consumer:
    build:
      context: ./workers
      dockerfile: Dockerfile
    deploy:
      # replicas scales containers
      replicas: 1
    # concurrency specifies number of worker
    # purge deletes the broker queue every time it starts up
    command: celery -A consumer.celery_app worker --loglevel=INFO --purge --concurrency=1
    volumes:
      - ./workers:/opt/
    depends_on:
      - producer
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - app-network

    

    

  custom_mqtt_container:
    build:
      context: .
      dockerfile: Dockerfile.mqtt
    ports:
      - "9001:9001"
    networks:
      - mqtt-network
    restart: always
    command: python mqtt.py
    depends_on:
      - fastapi_app
    volumes:
      - ./mqtt.py:/mqtt/mqtt.py


networks:
  app-network:
    driver: bridge
  mqtt-network:
    driver: bridge

volumes: # All the named volumes needed to persist data after container deletion
  db-volume:
    
